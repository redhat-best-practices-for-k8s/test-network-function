// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/reel/reel.go

// Package mock_reel is a generated GoMock package.
package mock_reel

import (
	gomock "github.com/golang/mock/gomock"
	reel "github.com/redhat-nfvpe/test-network-function/internal/reel"
	reflect "reflect"
)

// MockHandler is a mock of Handler interface
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// ReelFirst mocks base method
func (m *MockHandler) ReelFirst() *reel.Step {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReelFirst")
	ret0, _ := ret[0].(*reel.Step)
	return ret0
}

// ReelFirst indicates an expected call of ReelFirst
func (mr *MockHandlerMockRecorder) ReelFirst() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReelFirst", reflect.TypeOf((*MockHandler)(nil).ReelFirst))
}

// ReelMatch mocks base method
func (m *MockHandler) ReelMatch(pattern, before, match string) *reel.Step {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReelMatch", pattern, before, match)
	ret0, _ := ret[0].(*reel.Step)
	return ret0
}

// ReelMatch indicates an expected call of ReelMatch
func (mr *MockHandlerMockRecorder) ReelMatch(pattern, before, match interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReelMatch", reflect.TypeOf((*MockHandler)(nil).ReelMatch), pattern, before, match)
}

// ReelTimeout mocks base method
func (m *MockHandler) ReelTimeout() *reel.Step {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReelTimeout")
	ret0, _ := ret[0].(*reel.Step)
	return ret0
}

// ReelTimeout indicates an expected call of ReelTimeout
func (mr *MockHandlerMockRecorder) ReelTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReelTimeout", reflect.TypeOf((*MockHandler)(nil).ReelTimeout))
}

// ReelEOF mocks base method
func (m *MockHandler) ReelEOF() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReelEOF")
}

// ReelEOF indicates an expected call of ReelEOF
func (mr *MockHandlerMockRecorder) ReelEOF() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReelEOF", reflect.TypeOf((*MockHandler)(nil).ReelEOF))
}
