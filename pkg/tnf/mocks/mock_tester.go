// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/tnf/test.go

// Package mock_tnf is a generated GoMock package.
package mock_tnf

import (
	gomock "github.com/golang/mock/gomock"
	identifier "github.com/redhat-nfvpe/test-network-function/pkg/tnf/identifier"
	reflect "reflect"
	time "time"
)

// MockTester is a mock of Tester interface
type MockTester struct {
	ctrl     *gomock.Controller
	recorder *MockTesterMockRecorder
}

// MockTesterMockRecorder is the mock recorder for MockTester
type MockTesterMockRecorder struct {
	mock *MockTester
}

// NewMockTester creates a new mock instance
func NewMockTester(ctrl *gomock.Controller) *MockTester {
	mock := &MockTester{ctrl: ctrl}
	mock.recorder = &MockTesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTester) EXPECT() *MockTesterMockRecorder {
	return m.recorder
}

// Args mocks base method
func (m *MockTester) Args() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Args indicates an expected call of Args
func (mr *MockTesterMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockTester)(nil).Args))
}

// GetIdentifier mocks base method
func (m *MockTester) GetIdentifier() identifier.Identifier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentifier")
	ret0, _ := ret[0].(identifier.Identifier)
	return ret0
}

// GetIdentifier indicates an expected call of GetIdentifier
func (mr *MockTesterMockRecorder) GetIdentifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentifier", reflect.TypeOf((*MockTester)(nil).GetIdentifier))
}

// Result mocks base method
func (m *MockTester) Result() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].(int)
	return ret0
}

// Result indicates an expected call of Result
func (mr *MockTesterMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockTester)(nil).Result))
}

// Timeout mocks base method
func (m *MockTester) Timeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Timeout indicates an expected call of Timeout
func (mr *MockTesterMockRecorder) Timeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timeout", reflect.TypeOf((*MockTester)(nil).Timeout))
}
