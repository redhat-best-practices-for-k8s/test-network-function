// Copyright (C) 2020-2021 Red Hat, Inc.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

package {{ .Lower_handlername }}

import (
	"time"
	"github.com/test-network-function/test-network-function/pkg/tnf"
	"github.com/test-network-function/test-network-function/pkg/tnf/reel"
)

// {{ .Upper_handlername }} provides a {{ .Upper_handlername }} test implemented using command line tool {{ .Upper_handlername }}.
type {{ .Upper_handlername }} struct {
	result  int
	timeout time.Duration
	args    []string
	// adding special parameters
}

const (
	// adding special variables
)

// Args function
func (h *{{ .Upper_handlername }}) Args() []string {
	return h.args
}

// GetIdentifier returns the tnf.Test specific identifier.
func (h *{{ .Upper_handlername }}) GetIdentifier() {
	// TODO : create identifier.{{ .Upper_handlername }}Identifier.	
}

// Timeout return the timeout for the test.
func (h *{{ .Upper_handlername }}) Timeout() time.Duration {
	return h.timeout
}

// Result returns the test result.
func (h *{{ .Upper_handlername }}) Result() int {
	return h.result
}

// ReelFirst returns a step which expects an Handlername summary for the given device.
func (h *{{ .Upper_handlername }}) ReelFirst() *reel.Step {
	return &reel.Step{
		Expect: []string{""}, // TODO : pass the list of possible regex in here
		Timeout: h.timeout,
	}
}

// ReelMatch parses the {{ .Upper_handlername }} output and set the test result on match.
func (h *{{ .Upper_handlername }}) ReelMatch(_, _, match string) *reel.Step {
	h.result = tnf.ERROR
	return nil
	// TODO : add the matching logic in here
}

// ReelTimeout does nothing, {{ .Upper_handlername }} requires no explicit intervention for a timeout.
func (h *{{ .Upper_handlername }}) ReelTimeout() *reel.Step {
	return nil
	// TODO : fill the stub
}

// ReelEOF does nothing, {{ .Upper_handlername }} requires no explicit intervention for EOF.
func (h *{{ .Upper_handlername }}) ReelEOF() {
	// TODO : fill the stub
}
