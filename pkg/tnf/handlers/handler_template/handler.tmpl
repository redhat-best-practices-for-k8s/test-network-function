// Copyright (C) 2020-2021 Red Hat, Inc.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

package {{ .LowerHandlername }}

import (
	"time"

	"github.com/test-network-function/test-network-function/pkg/tnf"
	"github.com/test-network-function/test-network-function/pkg/tnf/identifier"
	"github.com/test-network-function/test-network-function/pkg/tnf/reel"
)

// {{ .UpperHandlername }} is the reel handler struct.
type {{ .UpperHandlername }} struct {
	result  int
	timeout time.Duration
	args    []string
	// adding special parameters
}

const (
// adding special variables
)

// New{{ .UpperHandlername }} returns a new {{ .UpperHandlername }} handler struct.
// TODO: Add needed parameters to this function and initialize the handler properly.
func New{{ .UpperHandlername }}(timeout time.Duration) *{{ .UpperHandlername }} {
	return &{{ .UpperHandlername }}{
		timeout: timeout,
		result:  tnf.ERROR,
		args:    []string{}, // TODO: Add proper execution command.
	}
}

// Args returns the initial execution/send command strings for handler {{ .UpperHandlername }}.
func (h *{{ .UpperHandlername }}) Args() []string {
	return h.args
}

// GetIdentifier returns the tnf.Test specific identifier.
func (h *{{ .UpperHandlername }}) GetIdentifier() identifier.Identifier {
	// Return the {{ .UpperHandlername }} handler identifier.
	return identifier.Identifier{}
}

// Timeout returns the timeout for the test.
func (h *{{ .UpperHandlername }}) Timeout() time.Duration {
	return h.timeout
}

// Result returns the test result.
func (h *{{ .UpperHandlername }}) Result() int {
	return h.result
}

// ReelFirst returns a reel step for handler {{ .UpperHandlername }}.
func (h *{{ .UpperHandlername }}) ReelFirst() *reel.Step {
	return &reel.Step{
		Expect:  []string{}, // TODO : pass the list of possible regex in here
		Timeout: h.timeout,
	}
}

// ReelMatch parses the {{ .UpperHandlername }} output and set the test result on match.
func (h *{{ .UpperHandlername }}) ReelMatch(_, _, match string) *reel.Step {
	// TODO : add the matching logic here and return an appropriate tnf result.
	h.result = tnf.ERROR
	return nil
}

// ReelTimeout function for {{ .UpperHandlername }} will be called by the reel FSM when a expect timeout occurs.
func (h *{{ .UpperHandlername }}) ReelTimeout() *reel.Step {
	// TODO : Add code here in case a timeout reaction is needed.
	return nil
}

// ReelEOF function for {{ .UpperHandlername }} will be called by the reel FSM when a EOF is read.
func (h *{{ .UpperHandlername }}) ReelEOF() {
	// TODO : Add code here in case a EOF reaction is needed.
}
